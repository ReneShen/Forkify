var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _urlImgIconsSvg = require('url:../../img/icons.svg');
var _urlImgIconsSvgDefault = _parcelHelpers.interopDefault(_urlImgIconsSvg);
function _defineProperty(obj, key, value) {
  if ((key in obj)) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
class View {
  constructor() {
    _defineProperty(this, "_data", void 0);
    _defineProperty(this, "renderSpinner", function () {
      const markup = `
    <div class="spinner">
      <svg>
        <use href="${_urlImgIconsSvgDefault.default}#icon-loader"></use>
      </svg>
    </div>`;
      this._clear();
      this._parentElement.insertAdjacentHTML(`afterbegin`, markup);
    });
  }
  /**
  * Render the received object to the DOM
  * @param {Object | Object[]} data The data to be rendered (e.g. recipe)
  * @param {boolean} [render=true] If false, create markup string instead of rendering it to the DOM
  * @returns {undefined | string} A markup sting is returned if render=false
  * @this {object} View instance
  * @author Rene Shen
  */
  render(data, render = true) {
    if (!data || Array.isArray(data) && data.length === 0) return this.renderError();
    this._data = data;
    const markup = this._generateMarkup();
    if (!render) return markup;
    this._clear();
    this._parentElement.insertAdjacentHTML(`afterbegin`, markup);
  }
  update(data) {
    this._data = data;
    const newMarkup = this._generateMarkup();
    // Create a virtual DOM that lives in the memory
    const newDom = document.createRange().createContextualFragment(newMarkup);
    // Compare the virtual DOM nodes with original nodes
    const newElements = Array.from(newDom.querySelectorAll('*'));
    const curElements = Array.from(this._parentElement.querySelectorAll('*'));
    newElements.forEach((newEl, i) => {
      const curEl = curElements[i];
      // Updating text
      if (!newEl.isEqualNode(curEl) && newEl.firstChild?.nodeValue?.trim?.() !== '') curEl.textContent = newEl.textContent;
      // Updating attributes
      if (!newEl.isEqualNode(curEl)) Array.from(newEl.attributes).forEach(attr => curEl.setAttribute(attr.name, attr.value));
    });
  }
  /*error message*/
  renderError(message = this._errorMessage) {
    const markup = `
    <div class="error">
      <div>
        <svg>
          <use href="${_urlImgIconsSvgDefault.default}#icon-alert-triangle"></use>
        </svg>
      </div>
      <p>${message}</p>
    </div>`;
    this._clear();
    this._parentElement.insertAdjacentHTML(`afterbegin`, markup);
  }
  /*success message (for future use)*/
  renderMessage(message = this._message) {
    const markup = `
    <div class="message">
      <div>
        <svg>
          <use href="${_urlImgIconsSvgDefault.default}#icon-smile"></use>
        </svg>
      </div>
      <p>${message}</p>
    </div>`;
    this._clear();
    this._parentElement.insertAdjacentHTML(`afterbegin`, markup);
  }
  _clear() {
    this._parentElement.innerHTML = '';
  }
}
exports.default = View;
